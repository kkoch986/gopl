// Package symbols is generated by gogll. Do not edit.
package symbols

type Symbol interface {
	isSymbol()
	IsNonTerminal() bool
	String() string
}

func (NT) isSymbol() {}
func (T) isSymbol()  {}

// NT is the type of non-terminals symbols
type NT int

const (
	NT_Arg NT = iota
	NT_ArgList
	NT_Concatenation
	NT_Cons
	NT_Fact
	NT_FactList
	NT_Factor
	NT_Infix
	NT_List
	NT_MathAssignment
	NT_MathExpr
	NT_Mult
	NT_Query
	NT_Rule
	NT_Statement
	NT_StatementList
)

// T is the type of terminals symbols
type T int

const (
	T_0  T = iota // (
	T_1           // ()
	T_2           // )
	T_3           // *
	T_4           // +
	T_5           // ,
	T_6           // -
	T_7           // .
	T_8           // /
	T_9           // :-
	T_10          // ?-
	T_11          // [
	T_12          // []
	T_13          // ]
	T_14          // atom
	T_15          // infix_operator
	T_16          // is
	T_17          // num_lit
	T_18          // string_lit
	T_19          // var
	T_20          // |
)

type Symbols []Symbol

func (ss Symbols) Strings() []string {
	strs := make([]string, len(ss))
	for i, s := range ss {
		strs[i] = s.String()
	}
	return strs
}

func (NT) IsNonTerminal() bool {
	return true
}

func (T) IsNonTerminal() bool {
	return false
}

func (nt NT) String() string {
	return ntToString[nt]
}

func (t T) String() string {
	return tToString[t]
}

var ntToString = []string{
	"Arg",            /* NT_Arg */
	"ArgList",        /* NT_ArgList */
	"Concatenation",  /* NT_Concatenation */
	"Cons",           /* NT_Cons */
	"Fact",           /* NT_Fact */
	"FactList",       /* NT_FactList */
	"Factor",         /* NT_Factor */
	"Infix",          /* NT_Infix */
	"List",           /* NT_List */
	"MathAssignment", /* NT_MathAssignment */
	"MathExpr",       /* NT_MathExpr */
	"Mult",           /* NT_Mult */
	"Query",          /* NT_Query */
	"Rule",           /* NT_Rule */
	"Statement",      /* NT_Statement */
	"StatementList",  /* NT_StatementList */
}

var tToString = []string{
	"(",              /* T_0 */
	"()",             /* T_1 */
	")",              /* T_2 */
	"*",              /* T_3 */
	"+",              /* T_4 */
	",",              /* T_5 */
	"-",              /* T_6 */
	".",              /* T_7 */
	"/",              /* T_8 */
	":-",             /* T_9 */
	"?-",             /* T_10 */
	"[",              /* T_11 */
	"[]",             /* T_12 */
	"]",              /* T_13 */
	"atom",           /* T_14 */
	"infix_operator", /* T_15 */
	"is",             /* T_16 */
	"num_lit",        /* T_17 */
	"string_lit",     /* T_18 */
	"var",            /* T_19 */
	"|",              /* T_20 */
}

var stringNT = map[string]NT{
	"Arg":            NT_Arg,
	"ArgList":        NT_ArgList,
	"Concatenation":  NT_Concatenation,
	"Cons":           NT_Cons,
	"Fact":           NT_Fact,
	"FactList":       NT_FactList,
	"Factor":         NT_Factor,
	"Infix":          NT_Infix,
	"List":           NT_List,
	"MathAssignment": NT_MathAssignment,
	"MathExpr":       NT_MathExpr,
	"Mult":           NT_Mult,
	"Query":          NT_Query,
	"Rule":           NT_Rule,
	"Statement":      NT_Statement,
	"StatementList":  NT_StatementList,
}
